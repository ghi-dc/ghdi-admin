# config/services.yaml
services:
    # the following two configurations are needed for command-classes to be automatically
    # registered as services, see
    #   https://symfony.com/doc/3.4/console/commands_as_services.html
    # default configuration for services in *this* file
    
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $siteKey: '%app.site.key%' # so we can inject this one, https://symfony.com/blog/new-in-symfony-3-4-local-service-binding
            
    twig.extension.pcre:
        class: Jasny\Twig\PcreExtension
        tags:
          - { name: twig.extension }
      
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'        

    # additional services
    App\Service\ExistDbClientService:
        public: true    # we get this one in *Command
        arguments:
            $options: "%app.existdb.options%"

    App\Service\ZoteroApiService:
        public: true    # we get this one in *Command
        arguments:
            $options: "%app.zotero.options%"
            
    App\Service\CollectiveAccessService:
        arguments:
            $options: "%app.collective-access.options%"
            
    App\Menu\Builder:
        arguments: [ "@knp_menu.factory", "@security.authorization_checker", "@translator", "@request_stack", "%app.zotero.options%" ]
        tags:
            # The alias is what is used to retrieve the menu in twig
            - { name: knp_menu.menu_builder, method: createTopMenu, alias: top } 
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main }
            - { name: knp_menu.menu_builder, method: createBreadcrumbMenu, alias: breadcrumb }
            - { name: knp_menu.menu_builder, method: createFooterMainMenu, alias: footer-main }

    App\Utils\PandocProcessor:
        public: true    # we get this one in *Controller, TODO: switch to typed argument
        arguments:  [ "%app.pandoc.processor.arguments%" ]

    App\Utils\PandocConverter:
        public: true    # we get this one in *Controller, TODO: switch to typed argument
        arguments:  [ "%app.pandoc.processor.arguments%" ]

    App\Utils\XslConverter:
        public: true    # we get this one in *Controller, TODO: switch to typed argument
        calls:
            - [ setOption, [ 'adapter', '@app.xsl-converter-adapter' ]]

    App\Service\ImageConversion\ConversionService:
        public: true    # we get this one in *Controller, TODO: switch to typed argument
        calls:
            - [ addProvider, [ '@app.image-conversion-provider' ]]

    App\Utils\AnvcScalarClient:
        arguments: [ "%app.scalar_client.options%" ]

    app.xsl-converter-adapter:
        class: "%app.xsl-converter-adapter.class%"
        arguments:  [ "%app.xsl-converter-adapter.arguments%" ]

    app.image-conversion-provider:
        class: "%app.image-conversion-provider.class%"
        arguments:  [ "%app.image-conversion-provider.arguments%" ]

    app.tei-prettyprinter-adapter:
        class: "%app.tei-prettyprinter-adapter.class%"
        arguments:  [ "%app.tei-prettyprinter-adapter.arguments%" ]

    app.tei-prettyprinter:
        public: true
        class: App\Utils\XmlPrettyPrinter\XmlPrettyPrinter
        calls:
            - [ setAdapter, [ '@app.tei-prettyprinter-adapter' ]]
